//https://leetcode.com/problems/multiply-strings/

class Solution {
public:
	string multiply(string num1, string num2) {
		if (num1 == "0" || num2 == "0") return "0";
		int len1 = num1.size();
		int len2 = num2.size();
		int len = len1 + len2;
		string answer(len, '0');

		for (int m = len - 2; m >= 0; m--) {
			int sum = 0;
			for (int i = len1 - 1, j = m - i; i >= 0 && j < len2; i--, j++) {
				if (j < 0) continue;
				sum += (num1[i] - '0') * (num2[j] - '0');
			}
			int n = 0;
			int carry = 0;
			while (sum > 0 || carry > 0) {
				int value1 = sum % 10;
				sum /= 10;
				int value2 = answer[m + 1 - n] - '0';
				answer[m + 1 - n] = (value1 + value2 + carry) % 10 + '0';
				carry = (value1 + value2 + carry) / 10;
				n++;
			}
		}
		for (int i = 0; i < answer.size(); i++)
			if (answer[i] != '0') return answer.substr(i);
		return answer;
	}
};

string stringToString(string input) {
    assert(input.length() >= 2);
    string result;
    for (int i = 1; i < input.length() -1; i++) {
        char currentChar = input[i];
        if (input[i] == '\\') {
            char nextChar = input[i+1];
            switch (nextChar) {
                case '\"': result.push_back('\"'); break;
                case '/' : result.push_back('/'); break;
                case '\\': result.push_back('\\'); break;
                case 'b' : result.push_back('\b'); break;
                case 'f' : result.push_back('\f'); break;
                case 'r' : result.push_back('\r'); break;
                case 'n' : result.push_back('\n'); break;
                case 't' : result.push_back('\t'); break;
                default: break;
            }
            i++;
        } else {
          result.push_back(currentChar);
        }
    }
    return result;
}

int main() {
    string line;
    while (getline(cin, line)) {
        string num1 = stringToString(line);
        getline(cin, line);
        string num2 = stringToString(line);
        
        string ret = Solution().multiply(num1, num2);

        string out = (ret);
        cout << out << endl;
    }
    return 0;
}
